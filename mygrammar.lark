?start: statement*

statement: compound_statement
         | selection_statement
         | iteration_statement
         | jump_statement
         | preach_statement
         | declaration 
         | tuple_declaration
         | list_declaration
         | array_declaration 
         | function_definition

tuple_declaration: "TypeKeyword(value='tuple')" identifier "Operator(value='=')" "Symbols(value='" LPAREN "')" assignment_expression value_list "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"

list_declaration: "TypeKeyword(value='list')" identifier "Operator(value='=')" "Symbols(value='" LBRACKET "')" value_list "Symbols(value='" RBRACKET "')" "EndOfStatement(value=';')"

value_list: ("Symbols(value=',')" assignment_expression)* 

compound_statement: "Symbols(value='" LBRACE "')" declaration* statement* "Symbols(value='" RBRACE "')"

declaration: declaration_specifier? assignment_expression "EndOfStatement(value=';')"
        | array_declaration "EndOfStatement(value=';')"

declaration_specifier: ("Keyword(value='" ETERNAL "')")? type_specifier

type_specifier: "TypeKeyword(value='" VOID "')"
              | "TypeKeyword(value='" CHAR "')"
              | "TypeKeyword(value='" INT "')"
              | "TypeKeyword(value='" FLOAT "')"
              | "TypeKeyword(value='" BOOL "')"
              | "TypeKeyword(value='" STR "')"


preach_statement: "Keyword(value='" KEYWORD_PREACH "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"


selection_statement: "Keyword(value='" KEYWORD_BELIEF "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" statement
                   | "Keyword(value='" KEYWORD_BELIEF "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" statement "Keyword(value='" KEYWORD_ELSE "')" statement


iteration_statement: "Keyword(value='" KEYWORD_PLEDGE "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" statement
                   | "Keyword(value='" KEYWORD_OATH "')" statement "Keyword(value='" KEYWORD_PLEDGE "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"
                   | "Keyword(value='" KEYWORD_CHANT "')" "Symbols(value='" LPAREN "')" declaration_specifier? assignment_expression "EndOfStatement(value=';')" expression? "EndOfStatement(value=';')" expression? "Symbols(value='" RPAREN "')" statement 


jump_statement: "Keyword(value='" KEYWORD_PERSIST "')" "EndOfStatement(value=';')"
              | "Keyword(value='" KEYWORD_RETREAT "')" "EndOfStatement(value=';')"
              | "Keyword(value='" KEYWORD_DELIVER "')" expression? "EndOfStatement(value=';')"

assignment_expression:  expression
                      | postfix_expression assignment_operator assignment_expression

assignment_operator: "Operator(value='" ASSIGN "')"
                   | "Operator(value='" MULTIPLY_ASSIGN "')"
                   | "Operator(value='" DIVIDE_ASSIGN "')"
                   | "Operator(value='" MODULO_ASSIGN "')"
                   | "Operator(value='" ADD_ASSIGN "')"
                   | "Operator(value='" SUBTRACT_ASSIGN "')"

expression: logical_or_expression

logical_or_expression: logical_and_expression
                     | logical_or_expression "Operator(value='" OR "')" logical_and_expression

logical_and_expression: and_expression
                      | logical_and_expression "Operator(value='" AND "')" and_expression

and_expression: equality_expression
              | and_expression "Operator(value='" BIT_AND "')" equality_expression

equality_expression: relational_expression
                    | equality_expression "Operator(value='" EQ "')" relational_expression
                    | equality_expression "Operator(value='" NEQ "')" relational_expression

relational_expression: additive_expression
                     | relational_expression "Operator(value='" LT "')" additive_expression
                     | relational_expression "Operator(value='" GT "')" additive_expression
                     | relational_expression "Operator(value='" LEQ "')" additive_expression
                     | relational_expression "Operator(value='" GEQ "')" additive_expression

additive_expression: multiplicative_expression
                   | additive_expression "Operator(value='" PLUS "')" multiplicative_expression
                   | additive_expression "Operator(value='" MINUS "')" multiplicative_expression


multiplicative_expression: postfix_expression
                         | multiplicative_expression "Operator(value='" MULTIPLY "')" postfix_expression
                         | multiplicative_expression "Operator(value='" DIVIDE "')" postfix_expression
                         | multiplicative_expression "Operator(value='" MODULO "')" postfix_expression

postfix_expression: function_call 
                  | postfix_expression "Operator(value='" INCREMENT "')" 
                  | postfix_expression "Operator(value='" DECREMENT "')" 
                  | member_access_expression



member_access_expression: primary_expression "Symbols(value='" DOT "')" list_op 
                        | primary_expression "Symbols(value='" DOT "')" tuple_op
                        | primary_expression "Symbols(value='" DOT "')" array_op
                        | primary_expression "Symbols(value='" LBRACKET "')" identifier "Symbols(value='" RBRACKET "')"  
                        | primary_expression

primary_expression: identifier
                  | integer
                  | float
                  | string
                  | boolean
                  | char
                  | "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')"

list_op: "UtilityFunction(value='" HEAD "')" "EndOfStatement(value=';')"
       | "UtilityFunction(value='" TAIL "')" "EndOfStatement(value=';')"
       | "UtilityFunction(value='" LENGTH "')"
       | "UtilityFunction(value='" CONS "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"
       | "UtilityFunction(value='" APPEND "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"
       | "UtilityFunction(value='" INSERT "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" COMMA "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"



tuple_op: "UtilityFunction(value='" TUPLE_HEAD "')" "EndOfStatement(value=';')"
        | "UtilityFunction(value='" TUPLE_TAIL "')" "EndOfStatement(value=';')"
        | "UtilityFunction(value='" TUPLE_CONS "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')"
        | "UtilityFunction(value='" TUPLE_LENGTH "')"

array_op: "UtilityFunction(value='" ARRAY_LENGTH "')"
        | "UtilityFunction(value='" ARRAY_APPEND "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"
        | "UtilityFunction(value='" ARRAY_REMOVE "')" "Symbols(value='" LPAREN "')" expression "Symbols(value='" RPAREN "')" "EndOfStatement(value=';')"
        | "Symbols(value='" LBRACKET "')" expression "Symbols(value='" RBRACKET "')"




function_definition: "Keyword(value='" INVOKE "')" type_specifier identifier "Symbols(value='" LPAREN "')" parameter_list "Symbols(value='" RPAREN "')" function_body

parameter_list: (type_specifier identifier ("Symbols(value='" COMMA "')" type_specifier identifier)*)?



function_body: "Symbols(value='" LBRACE "')" (declaration | statement)* "Symbols(value='" RBRACE "')"

function_call: identifier "Symbols(value='" LPAREN "')" assignment_expression value_list "Symbols(value='" RPAREN "')"

array_declaration: "TypeKeyword(value='array')" "Operator(value='<')" type_specifier "Operator(value='>')" identifier "Operator(value='=')" "Symbols(value='" LBRACKET "')" expression ("Symbols(value=',')" expression)* "Symbols(value='" RBRACKET "')" "EndOfStatement(value=';')"

LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"
LPAREN: "("
RPAREN: ")"
DOT: "."
COMMA: ","
HEAD: "head"
TAIL: "tail"
LENGTH: "length"
CONS: "cons"
APPEND: "append"
INSERT: "insert"
INVOKE: "invoke"
TUPLE_HEAD: "head"
TUPLE_TAIL: "tail"
TUPLE_CONS: "cons"
TUPLE_LENGTH: "length"
ARRAY_LENGTH: "length"
ARRAY_APPEND: "append"
ARRAY_REMOVE: "remove"
TRUE: "True"
FALSE: "False"
MULTIPLY: "*"
DIVIDE: "/"
MODULO: "%"
INCREMENT: "++"
DECREMENT: "--"
OR: "||"
AND: "&&"
BIT_AND: "&"
EQ: "=="
NEQ: "!="
LT: "<"
GT: ">"
LEQ: "<="
GEQ: ">="
PLUS: "+"
MINUS: "-"
ASSIGN: "="
MULTIPLY_ASSIGN: "*="
DIVIDE_ASSIGN: "/="
MODULO_ASSIGN: "%="
ADD_ASSIGN: "+="
SUBTRACT_ASSIGN: "-="
ETERNAL: "eternal"
VOID: "void"
CHAR: "char"
INT: "int"
FLOAT: "float"
BOOL: "bool"
STR: "str"
KEYWORD_PREACH: "preach"
KEYWORD_BELIEF: "belief"
KEYWORD_ELSE: "else"
KEYWORD_PLEDGE: "pledge"
KEYWORD_OATH: "oath"
KEYWORD_CHANT: "chant"
KEYWORD_PERSIST: "persist"
KEYWORD_RETREAT: "retreat"
KEYWORD_DELIVER: "deliver"

identifier: "Identifier(value='" CNAME "')"
integer: "Int(value=" SIGNED_INT ")"
float: "Float(value=" SIGNED_FLOAT ")"
string: "StringToken(value=" SINGLE_QUOTE_STR ")"
char: "CharToken(value=" CHAR_SEQUENCE ")"
SINGLE_QUOTE_STR: /'([^'\\]|\\.)*'/
CHAR_SEQUENCE: "'" ( /\\[nrt'"\\]/ | /[^'\\]/) "'"
boolean: "Bool(value='" TRUE "')"
       | "Bool(value='" FALSE "')"

%import common.LETTER
%import common.NUMBER
%import common.CNAME
%import common.SIGNED_INT 
%import common.SIGNED_FLOAT
%import common.ESCAPED_STRING
%import common.WS
%ignore WS
